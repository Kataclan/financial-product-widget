{"version":3,"sources":["components/FlexContainers.tsx","components/LoadingSpinner.tsx","components/MainLayout.tsx","AppComponent.tsx","store/selectors.ts","AppController.tsx","serviceWorker.ts","store/types.ts","store/utils.ts","store/reducer.ts","store/actions.ts","store/sagas.ts","index.tsx","store/index.ts"],"names":["FlexContainer","styledTS","styledComponents","div","props","vertical","flex","flexWrap","full","alignItems","justifyContent","alignSelf","overflow","FlexVContainer","LoadingSpinner","alt","id","className","src","MainLayout","containerId","containerClassName","showLoading","children","AppComponent","layoutOptions","isFetching","getIsFetchingFinancialProduct","createSelector","state","get","connect","ownProps","appSelectors","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","AppActions","composeEnhancers","compose","initialState","fromJS","isFetchingReducer","createReducer","handleType","FETCH_FINANCIAL_PRODUCT","set","RECEIVE_FINANCIAL_PRODUCT","handlers","init","createAction","INIT","rootSaga","put","store","loggerMiddleWare","createLogger","collapsed","sagaMiddleWare","createSagaMiddleWare","middlewares","enhancer","applyMiddleware","createStore","appReducer","run","configureStore","rootElement","document","getElementById","defaultWidgetOptions","itemValue","dataset","parseFloat","toString","sequra","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8da57f68.chunk.js","sourcesContent":["import React from 'react';\nimport styledComponents from 'styled-components';\nimport styledTS from 'styled-components-ts';\n\ntype FlexContainerProps = React.CSSProperties & {\n  id?: string;\n  className?: string;\n  full?: boolean;\n  flex?: string;\n  vertical?: boolean;\n  alignItems?: string;\n  justifyContent?: string;\n  alignSelf?: string;\n  flexWrap?: string;\n  overflow?: string;\n};\n\nexport const FlexContainer = styledTS<FlexContainerProps>(styledComponents.div)`\n    display: flex;\n    flex-direction: ${props => (props.vertical ? 'column' : 'row')};\n    ${props => (props.flex ? `flex: ${props.flex}` : '')};\n    ${props => (props.flexWrap ? `flex-wrap: ${props.flexWrap}` : '')};\n    ${props => (props.full ? 'width:100%;height:100%;' : '')};\n    ${props => (props.alignItems ? `align-items: ${props.alignItems}` : '')};\n    ${props => (props.justifyContent ? `justify-content: ${props.justifyContent}` : '')};\n    ${props => (props.alignSelf ? `align-self: ${props.alignSelf}` : '')};\n    ${props => (props.overflow ? `overflow: ${props.overflow}` : '')};\n`;\n\nexport const FlexVContainer: React.FC<FlexContainerProps> = props => (\n  <FlexContainer {...props} vertical={true} />\n);\n\nexport const FlexHContainer: React.FC<FlexContainerProps> = props => (\n  <FlexContainer {...props} vertical={false} />\n);\n\nexport const FlexGrow = styledTS(styledComponents.div)`\n  flex-grow: 1;\n`;\n","import React from 'react';\n\n/**\n * Renders a loading spinner extracted from a 3rd party website\n */\nconst LoadingSpinner: React.SFC = () => (\n  <img\n    alt=\"loading-spinner\"\n    id=\"loading-spinner\"\n    className=\"loading-spinner\"\n    src=\"https://i.pinimg.com/originals/3f/2c/97/3f2c979b214d06e9caab8ba8326864f3.gif\"\n  />\n);\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport { FlexVContainer } from '../components/FlexContainers';\nimport LoadingSpinner from './LoadingSpinner';\n\n/**\n * Main layout of the widget. It renders a loading spinner if showLoading is true, if not, renders its children\n * Also you can provide a container id and classname for more customization\n */\nconst MainLayout: React.SFC<{\n  containerId: string;\n  containerClassName: string;\n  showLoading: boolean;\n}> = ({ containerId, containerClassName, showLoading, children }) => (\n  <FlexVContainer id={containerId} className={containerClassName} full={true}>\n    {showLoading ? <LoadingSpinner /> : children}\n  </FlexVContainer>\n);\n\nexport default MainLayout;\n","import React from 'react';\nimport MainLayout from './components/MainLayout';\n\nexport type OwnProps = {\n  layoutOptions: {\n    containerId: string;\n    containerClassName: string;\n  };\n};\n\nexport type StateProps = {\n  isFetching: boolean;\n};\n\nexport type Props = StateProps & OwnProps;\n\nconst AppComponent: React.FC<Props> = ({ layoutOptions, isFetching }) => (\n  <MainLayout {...layoutOptions} showLoading={isFetching}>\n    <label>APP</label>\n  </MainLayout>\n);\n\nexport default AppComponent;\n","import { State } from './types';\n\nimport { createSelector } from 'reselect';\n\nexport const getIsFetchingFinancialProduct = createSelector(\n  (state: State) => state.get('isFetching'),\n  isFetching => (isFetching ? isFetching : false), // Needed to avoid returning undefined\n);\n","import { connect } from 'react-redux';\n\nimport { State } from './store/types';\n\nimport AppComponent, { OwnProps, Props } from './AppComponent';\nimport * as appSelectors from './store/selectors';\n\nconst mapStateToProps = (state: State, ownProps: OwnProps): Props => ({\n  ...ownProps,\n  isFetching: appSelectors.getIsFetchingFinancialProduct(state),\n});\n\nexport default connect(mapStateToProps)(AppComponent);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Action, ActionType } from 'typesafe-actions';\n\n/* STATE */\nexport interface AppState {\n  isFetching: boolean;\n}\n\n// Needed to use immutable state\nexport type State = Map<keyof AppState, AppState[keyof AppState]>;\n\n/* Actions */\nexport enum AppActions {\n  INIT = '@app/INIT',\n  FETCH_FINANCIAL_PRODUCT = '@@app/FETCH_FINANCIAL_PRODUCT',\n  RECEIVE_FINANCIAL_PRODUCT = '@@app/RECEIVE_FINANCIAL_PRODUCT',\n}\n\nexport interface ActionInit extends Action {\n  type: AppActions.INIT;\n}\n\nexport interface ActionFetchFinancialProduct extends Action {\n  type: AppActions.FETCH_FINANCIAL_PRODUCT;\n}\n\nexport interface ActionReceiveFinancialProduct extends Action {\n  type: AppActions.RECEIVE_FINANCIAL_PRODUCT;\n}\n\nexport type AppActionTypes =\n  | ActionInit\n  | ActionFetchFinancialProduct\n  | ActionReceiveFinancialProduct;\n\nexport type RootAction = ActionType<AppActionTypes>;\n","import { compose } from 'redux';\n\nexport const composeEnhancers =\n  (process.env.NODE_ENV === 'development' && window && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport const API_ROOT_URL = 'http://localhost:3000';\n","import { createReducer } from 'typesafe-actions';\nimport { fromJS } from 'immutable';\nimport { State, AppActions, AppActionTypes } from './types';\n\nconst initialState: State = fromJS({\n  isFetching: true,\n});\n\nconst isFetchingReducer = createReducer<State, AppActionTypes>(initialState)\n  .handleType(AppActions.FETCH_FINANCIAL_PRODUCT, state => state.set('isFetching', true))\n  .handleType(AppActions.RECEIVE_FINANCIAL_PRODUCT, state => state.set('isFetching', false));\n\nexport default createReducer<State, AppActionTypes>(initialState, {\n  ...isFetchingReducer.handlers,\n});\n","import { createAction } from 'typesafe-actions';\nimport { AppActions } from './types';\n\nexport const init = createAction(AppActions.INIT)<void>();\n\nexport const fetchFinancialProduct = createAction(AppActions.FETCH_FINANCIAL_PRODUCT)<void>();\n\nexport const receiveFinancialProduct = createAction(AppActions.RECEIVE_FINANCIAL_PRODUCT)<void>();\n","import { put } from 'redux-saga/effects';\nimport { init } from './actions';\n\nexport default function* rootSaga() {\n  yield put(init());\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './AppController';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\nexport const store = configureStore();\n\nconst rootElement = document.getElementById('financial-product-widget');\n\n// Here declare the default widget options. It gathers the item value from a data attribute of the root element\nconst defaultWidgetOptions: FinancialProductWidgetOptions = {\n  itemValue: rootElement?.dataset.itemValue\n    ? parseFloat(rootElement.dataset.itemValue?.toString())\n    : 0,\n  layoutOptions: {\n    containerId: 'default-container',\n    containerClassName: '',\n  },\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <App {...defaultWidgetOptions} />\n  </Provider>,\n  rootElement,\n);\n\nexport function sequra() {\n  console.log('SQUEAFEAF');\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeEnhancers } from './utils';\nimport appReducer from './reducer';\n\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleWare from 'redux-saga';\n\nimport rootSaga from './sagas';\n\n// This is a function to create the initial store. It creates the main state store\n// with a redux-thunk and logger middlewares\nexport default function configureStore() {\n  //Init middlewares\n  const loggerMiddleWare = createLogger({ collapsed: true });\n  const sagaMiddleWare = createSagaMiddleWare();\n  const middlewares = [loggerMiddleWare, sagaMiddleWare];\n\n  //Init enhancer\n  const enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\n  //Store creation\n  const store = createStore(appReducer, enhancer);\n\n  //Saga initialization\n  sagaMiddleWare.run(rootSaga);\n\n  return store;\n}\n"],"sourceRoot":""}